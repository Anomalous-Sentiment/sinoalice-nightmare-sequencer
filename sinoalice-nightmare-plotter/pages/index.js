import Head from 'next/head'
import Image from 'next/image'
import { useState } from 'react';
import styles from '../styles/Home.module.css'
import NightmareImageList from './nightmare-image-list'
import { Chart } from "react-google-charts";
import { DateTime } from "luxon";
import Tabs from 'react-bootstrap/Tabs'
import Tab from 'react-bootstrap/Tab'
import 'bootstrap/dist/css/bootstrap.min.css';
import ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup'
import ToggleButton from 'react-bootstrap/ToggleButton'


export default function Home() {
  const [serverNightmares, updateServerNightmares] = useState(null)
  const [globalNightmares, updateGlobalNightmares] = useState(null)
  const [jpnightmares, updateJpNightmares] = useState(null)
  const [iconKey, setIconKey] = useState('IconEN') 
  const [displayNameKey, setDisplayNameKey] = useState('NameEN')
  const [toolTipSkillNameKey, setToolTipSkillNameKey] = useState('GvgSkillEN')
  const [toolTipDescriptionKey, setToolTipDescriptionKey] = useState('GvgSkillDetailEN')
  const [reload, setReload] = useState(true)

  const [selectedNightmares, setSelected] = useState([])

  const columns = [
    { type: "string", id: "nightmare"},
    { type: "string", id: "state"},
    { type: "date", id: "Start" },
    { type: "date", id: "End" },
  ]
  // Get the current time
  const now = DateTime.now().startOf('hour');

  const placeholderRows = [
    ["Fear", "Prep", now.toJSDate(), now.plus({ seconds: 40 }).toJSDate()],
    ["Ugallu", "Prep", now.plus({ seconds: 40 }).toJSDate(), now.plus({ seconds: 40 + 80}).toJSDate()],
    ["Ugallu", "Active", now.plus({ seconds: 120 }).toJSDate(), now.plus({ seconds: 120 + 120}).toJSDate()],
    ["Griffon", "Prep", now.plus({ seconds: 240}).toJSDate(), now.plus({ seconds: 240 + 80}).toJSDate()],
    ["Griffon", "Active", now.plus({ seconds: 320}).toJSDate(), now.plus({ seconds: 320 + 120}).toJSDate()],
    ["Lindwyrm", "Prep", now.plus({ seconds: 440}).toJSDate(), now.plus({ seconds: 440 + 80}).toJSDate()],
    ["Lindwyrm", "Active", now.plus({ seconds: 520}).toJSDate(), now.plus({ seconds: 520 + 120}).toJSDate()],
    ["Freeze Golem", "Prep", now.plus({ seconds: 640}).toJSDate(), now.plus({ seconds: 640 + 80}).toJSDate()],
    ["Freeze Golem", "Active", now.plus({ seconds: 720}).toJSDate(), now.plus({ seconds: 720 + 120}).toJSDate()],
    ["Yuno", "Prep", now.plus({ seconds: 840}).toJSDate(), now.plus({ seconds: 890}).toJSDate()],
    ["Yuno", "Active", now.plus({ seconds: 890}).toJSDate(), now.plus({ seconds: 990}).toJSDate()],
    ["Dryas", "Prep", now.plus({ seconds: 990}).toJSDate(), now.plus({ seconds: 1040}).toJSDate()],
    ["Dryas", "Active", now.plus({ seconds: 1040}).toJSDate(), now.plus({ seconds: 1140}).toJSDate()],
    ["Rikone", "Prep", now.plus({ seconds: 1140}).toJSDate(), now.plus({ seconds: 1190}).toJSDate()],
    ["Rikone", "Active", now.plus({ seconds: 1190}).toJSDate(), now.plus({ seconds: 1290}).toJSDate()]
  ]
  const options = {
    colors : ["blue", "red"],
    hAxis: {
      format: 'mm:ss',
      maxValue: now.plus({minutes: 20}).toJSDate(),
      minValue: now.toJSDate()
    }
  };

  const data = [columns, ...placeholderRows];

  if (serverNightmares == null)
  {
    //Use the backend address here
    fetch("http://localhost:3001/")
    .then(response => response.json())
    .then((json) => {
      filterByServer(json["nightmares"]);
      updateServerNightmares(globalNightmares)
    });
  }

  function filterByServer(unfilteredNightmares)
  {
    //filter by global nightmares
    updateGlobalNightmares(unfilteredNightmares.filter(nightmare => nightmare['Global'] == true))

    //filter by jp nightmares
    updateJpNightmares(unfilteredNightmares.filter(nightmare => nightmare['Global'] == false))
  }

  function onServerchange(newServer)
  {
    console.log(newServer == 'Global')
    //change the filter to filter by new server
    if (newServer == 'Global')
    {
      updateServerNightmares(globalNightmares)
      setIconKey('IconEN')
      setDisplayNameKey('NameEN')
      setToolTipSkillNameKey('GvgSkillEN')
      setToolTipDescriptionKey('GvgSkillDetailEN')
    }
    else
    {
      updateServerNightmares(jpnightmares)
      setIconKey('Icon')
      setDisplayNameKey('Name')
      setToolTipSkillNameKey('GvgSkill')
      setToolTipDescriptionKey('GvgSkillDetail')
    }

    //Tell component to reload image list
    setReload(true)
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>SINoALICE Nightmare Plotter</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/alice.ico" />
      </Head>
      <Chart chartType="Timeline" data={data} width="100%" height="400px" options={options}/>

      <ToggleButtonGroup name="servers" size="lg" className="mb-2" type="radio" defaultValue="Global" onChange={onServerchange}>
          <ToggleButton id="global" value="Global">
            Global
          </ToggleButton>
          <ToggleButton id="japan" value="Japan">
            Japan
          </ToggleButton>
      </ToggleButtonGroup>

      <Tabs defaultActiveKey="profile" id="uncontrolled-tab-example" className="mb-3">
      <Tab eventKey="all" title="All Nightmares">
        <NightmareImageList list={serverNightmares} reload={reload} setReload={setReload} iconKey={iconKey} displayName={displayNameKey} toolTipSkillName={toolTipSkillNameKey} toolTipDescription={toolTipDescriptionKey}/>
      </Tab>
      <Tab eventKey="buff" title="Buff">
      </Tab>
      <Tab eventKey="debuff" title="Debuff">
      </Tab>
      <Tab eventKey="elemental" title="Elemental Nightmares">
      </Tab>
      <Tab eventKey="bells" title="Bells">
      </Tab>
      <Tab eventKey="reset" title="Gear Reset">
      </Tab>
      <Tab eventKey="other" title="Other" disabled>
      </Tab>
      <Tab eventKey="selected" title="Selected Nightmares">
      </Tab>
      </Tabs>
    </div>

  )
}
